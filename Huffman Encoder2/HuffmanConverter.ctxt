#BlueJ class context
comment0.target=HuffmanConverter
comment1.params=input
comment1.target=HuffmanConverter(java.lang.String)
comment1.text=Constructor\ taking\ input\ String\ to\ be\ converted
comment2.params=
comment2.target=void\ recordFrequencies()
comment2.text=\r\n\ Records\ the\ frequencies\ that\ each\ character\ of\ our\r\n\ message\ occurs...\r\n\ I.e.,\ we\ use\ 'contents'\ to\ fill\ up\ the\ count[]\ list...\r\n
comment3.params=
comment3.target=void\ frequenciesToTree()
comment3.text=\r\n\ Converts\ our\ frequency\ list\ into\ a\ Huffman\ Tree.\ We\ do\ this\ by\r\n\ taking\ our\ count[]\ list\ of\ frequencies,\ and\ creating\ a\ binary\r\n\ heap\ in\ a\ manner\ similar\ to\ how\ a\ heap\ was\ made\ in\ HuffmanTree's\r\n\ fileToHeap\ method.\ Then,\ we\ print\ the\ heap,\ and\ make\ a\ call\ to\r\n\ HuffmanTree.heapToTree()\ method\ to\ get\ our\ much\ desired\r\n\ HuffmanTree\ object,\ which\ we\ store\ as\ huffmanTree.\r\n
comment4.params=
comment4.target=void\ treeToCode()
comment4.text=\r\n\ Iterates\ over\ the\ huffmanTree\ to\ get\ the\ code\ for\ each\ letter.\r\n\ The\ code\ for\ letter\ i\ gets\ stored\ as\ code[i]...\ This\ method\r\n\ behaves\ similarly\ to\ HuffmanTree's\ printLegend()\ method...\r\n\ Warning\:\ Don't\ forget\ to\ initialize\ each\ code[i]\ to\ ""\r\n\ BEFORE\ calling\ the\ recursive\ version\ of\ treeToCode...\r\n
comment5.params=t\ s
comment5.target=void\ treeToCode(HuffmanNode,\ java.lang.String)
comment5.text=\r\n\ A\ private\ method\ to\ iterate\ over\ a\ HuffmanNode\ t\ using\ s,\ which\r\n\ contains\ what\ we\ know\ of\ the\ HuffmanCode\ up\ to\ node\ t.\ This\ is\r\n\ called\ by\ treeToCode(),\ and\ resembles\ the\ recursive\ printLegend\r\n\ method\ in\ the\ HuffmanTree\ class.\ Note\ that\ when\ t\ is\ a\ leaf\ node,\r\n\ t's\ letter\ tells\ us\ which\ index\ i\ to\ access\ in\ code[],\ and\ tells\r\n\ us\ what\ to\ set\ code[i]\ to...\r\n
comment6.params=
comment6.target=java.lang.String\ encodeMessage()
comment6.text=\r\n\ Using\ the\ message\ stored\ in\ contents,\ and\ the\ huffman\ conversions\r\n\ stored\ in\ code[],\ we\ create\ the\ Huffman\ encoding\ for\ our\ message\r\n\ (a\ String\ of\ 0's\ and\ 1's),\ and\ return\ it...\r\n
comment7.params=filename
comment7.target=java.lang.String\ readContents(java.lang.String)
comment7.text=\r\n\ Reads\ in\ the\ contents\ of\ the\ file\ named\ filename\ and\ returns\r\n\ it\ as\ a\ String.\ The\ main\ method\ calls\ this\ method\ on\ args[0]...\r\n
comment8.params=encodedStr
comment8.target=java.lang.String\ decodeMessage(java.lang.String)
comment8.text=\r\n\ Using\ the\ encoded\ String\ argument,\ and\ the\ huffman\ codings,\r\n\ re-create\ the\ original\ message\ from\ our\r\n\ huffman\ encoding\ and\ return\ it...\r\n
comment9.params=args
comment9.target=void\ main(java.lang.String[])
comment9.text=\r\n\ Uses\ args[0]\ as\ the\ filename,\ and\ reads\ in\ its\ contents.\ Then\r\n\ instantiates\ a\ HuffmanConverter\ object,\ using\ its\ methods\ to\r\n\ obtain\ our\ results\ and\ print\ the\ necessary\ output.\ Finally,\r\n\ decode\ the\ message\ and\ compare\ it\ to\ the\ input\ file.<p>\r\n\ NOTE\:\ Example\ method\ provided\ below...\r\n
numComments=10
