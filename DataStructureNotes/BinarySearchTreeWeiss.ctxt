#BlueJ class context
comment0.target=BinarySearchTreeWeiss
comment0.text=\r\n\ Implements\ an\ unbalanced\ binary\ search\ tree.\r\n\ Note\ that\ all\ "matching"\ is\ based\ on\ the\ compareTo\ method.\r\n\ @author\ Mark\ Allen\ Weiss\r\n
comment1.params=
comment1.target=BinarySearchTreeWeiss()
comment1.text=\r\n\ Construct\ the\ tree.\r\n
comment10.params=
comment10.target=void\ printTree()
comment10.text=\r\n\ Print\ the\ tree\ contents\ in\ sorted\ order.\r\n
comment11.params=t
comment11.target=java.lang.Comparable\ elementAt(BinaryNode)
comment11.text=\r\n\ Internal\ method\ to\ get\ element\ field.\r\n\ @param\ t\ the\ node.\r\n\ @return\ the\ element\ field\ or\ null\ if\ t\ is\ null.\r\n
comment12.params=x\ t
comment12.target=BinaryNode\ insert(java.lang.Comparable,\ BinaryNode)
comment12.text=\r\n\ Internal\ method\ to\ insert\ into\ a\ subtree.\r\n\ @param\ x\ the\ item\ to\ insert.\r\n\ @param\ t\ the\ node\ that\ roots\ the\ tree.\r\n\ @return\ the\ new\ root.\r\n
comment13.params=x\ t
comment13.target=BinaryNode\ insertBad(java.lang.Comparable,\ BinaryNode)
comment14.params=x\ t
comment14.target=BinaryNode\ remove(java.lang.Comparable,\ BinaryNode)
comment14.text=\r\n\ Internal\ method\ to\ remove\ from\ a\ subtree.\r\n\ @param\ x\ the\ item\ to\ remove.\r\n\ @param\ t\ the\ node\ that\ roots\ the\ tree.\r\n\ @return\ the\ new\ root.\r\n
comment15.params=t
comment15.target=BinaryNode\ findMin(BinaryNode)
comment15.text=\r\n\ Internal\ method\ to\ find\ the\ smallest\ item\ in\ a\ subtree.\r\n\ @param\ t\ the\ node\ that\ roots\ the\ tree.\r\n\ @return\ node\ containing\ the\ smallest\ item.\r\n
comment16.params=t
comment16.target=BinaryNode\ findMax(BinaryNode)
comment16.text=\r\n\ Internal\ method\ to\ find\ the\ largest\ item\ in\ a\ subtree.\r\n\ @param\ t\ the\ node\ that\ roots\ the\ tree.\r\n\ @return\ node\ containing\ the\ largest\ item.\r\n
comment17.params=x\ t
comment17.target=BinaryNode\ find(java.lang.Comparable,\ BinaryNode)
comment17.text=\r\n\ Internal\ method\ to\ find\ an\ item\ in\ a\ subtree.\r\n\ @param\ x\ is\ item\ to\ search\ for.\r\n\ @param\ t\ the\ node\ that\ roots\ the\ tree.\r\n\ @return\ node\ containing\ the\ matched\ item.\r\n
comment18.params=t
comment18.target=void\ printTree(BinaryNode)
comment18.text=\r\n\ Internal\ method\ to\ print\ a\ subtree\ in\ sorted\ order.\r\n\ @param\ t\ the\ node\ that\ roots\ the\ tree.\r\n
comment19.params=o
comment19.target=boolean\ equals(java.lang.Object)
comment2.params=x
comment2.target=void\ insert(java.lang.Comparable)
comment2.text=\r\n\ Insert\ into\ the\ tree;\ duplicates\ are\ ignored.\r\n\ @param\ x\ the\ item\ to\ insert.\r\n
comment20.params=th\ other
comment20.target=boolean\ equals(BinaryNode,\ BinaryNode)
comment21.params=
comment21.target=boolean\ testTreeProperty()
comment22.params=t\ lowLimit\ highLimit
comment22.target=boolean\ testTreeProperty(BinaryNode,\ java.lang.Comparable,\ java.lang.Comparable)
comment23.params=
comment23.target=BinarySearchTreeWeiss\ copyTree()
comment24.params=t
comment24.target=BinaryNode\ copyTree(BinaryNode)
comment25.params=o
comment25.target=boolean\ isSimilar(BinarySearchTreeWeiss)
comment26.params=th\ other
comment26.target=boolean\ isSimilar(BinaryNode,\ BinaryNode)
comment27.params=args
comment27.target=void\ main(java.lang.String[])
comment3.params=x
comment3.target=void\ insertBad(java.lang.Comparable)
comment4.params=x
comment4.target=void\ remove(java.lang.Comparable)
comment4.text=\r\n\ Remove\ from\ the\ tree.\ Nothing\ is\ done\ if\ x\ is\ not\ found.\r\n\ @param\ x\ the\ item\ to\ remove.\r\n
comment5.params=
comment5.target=java.lang.Comparable\ findMin()
comment5.text=\r\n\ Find\ the\ smallest\ item\ in\ the\ tree.\r\n\ @return\ smallest\ item\ or\ null\ if\ empty.\r\n
comment6.params=
comment6.target=java.lang.Comparable\ findMax()
comment6.text=\r\n\ Find\ the\ largest\ item\ in\ the\ tree.\r\n\ @return\ the\ largest\ item\ of\ null\ if\ empty.\r\n
comment7.params=x
comment7.target=java.lang.Comparable\ find(java.lang.Comparable)
comment7.text=\r\n\ Find\ an\ item\ in\ the\ tree.\r\n\ @param\ x\ the\ item\ to\ search\ for.\r\n\ @return\ the\ matching\ item\ or\ null\ if\ not\ found.\r\n
comment8.params=
comment8.target=void\ makeEmpty()
comment8.text=\r\n\ Make\ the\ tree\ logically\ empty.\r\n
comment9.params=
comment9.target=boolean\ isEmpty()
comment9.text=\r\n\ Test\ if\ the\ tree\ is\ logically\ empty.\r\n\ @return\ true\ if\ empty,\ false\ otherwise.\r\n
numComments=28
