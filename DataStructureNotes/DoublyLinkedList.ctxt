#BlueJ class context
comment0.target=DoublyLinkedList
comment0.text=\r\n\ A\ basic\ doubly\ linked\ list\ implementation.\r\n\r\n\ @author\ Michael\ T.\ Goodrich\r\n\ @author\ Roberto\ Tamassia\r\n\ @author\ Michael\ H.\ Goldwasser\r\n
comment1.params=
comment1.target=DoublyLinkedList()
comment1.text=Constructs\ a\ new\ empty\ list.
comment10.params=e\ predecessor\ successor
comment10.target=void\ addBetween(java.lang.Object,\ DoublyLinkedList.Node,\ DoublyLinkedList.Node)
comment10.text=\r\n\ Adds\ an\ element\ to\ the\ linked\ list\ in\ between\ the\ given\ nodes.\r\n\ The\ given\ predecessor\ and\ successor\ should\ be\ neighboring\ each\r\n\ other\ prior\ to\ the\ call.\r\n\r\n\ @param\ predecessor\ \ \ node\ just\ before\ the\ location\ where\ the\ new\ element\ is\ inserted\r\n\ @param\ successor\ \ \ \ \ node\ just\ after\ the\ location\ where\ the\ new\ element\ is\ inserted\r\n
comment11.params=node
comment11.target=java.lang.Object\ remove(DoublyLinkedList.Node)
comment11.text=\r\n\ Removes\ the\ given\ node\ from\ the\ list\ and\ returns\ its\ element.\r\n\ @param\ node\ \ \ \ the\ node\ to\ be\ removed\ (must\ not\ be\ a\ sentinel)\r\n
comment12.params=
comment12.target=java.lang.String\ toString()
comment12.text=\r\n\ Produces\ a\ string\ representation\ of\ the\ contents\ of\ the\ list.\r\n\ This\ exists\ for\ debugging\ purposes\ only.\r\n
comment2.params=
comment2.target=int\ size()
comment2.text=\r\n\ Returns\ the\ number\ of\ elements\ in\ the\ linked\ list.\r\n\ @return\ number\ of\ elements\ in\ the\ linked\ list\r\n
comment3.params=
comment3.target=boolean\ isEmpty()
comment3.text=\r\n\ Tests\ whether\ the\ linked\ list\ is\ empty.\r\n\ @return\ true\ if\ the\ linked\ list\ is\ empty,\ false\ otherwise\r\n
comment4.params=
comment4.target=java.lang.Object\ first()
comment4.text=\r\n\ Returns\ (but\ does\ not\ remove)\ the\ first\ element\ of\ the\ list.\r\n\ @return\ element\ at\ the\ front\ of\ the\ list\ (or\ null\ if\ empty)\r\n
comment5.params=
comment5.target=java.lang.Object\ last()
comment5.text=\r\n\ Returns\ (but\ does\ not\ remove)\ the\ last\ element\ of\ the\ list.\r\n\ @return\ element\ at\ the\ end\ of\ the\ list\ (or\ null\ if\ empty)\r\n
comment6.params=e
comment6.target=void\ addFirst(java.lang.Object)
comment6.text=\r\n\ Adds\ an\ element\ to\ the\ front\ of\ the\ list.\r\n\ @param\ e\ \ \ the\ new\ element\ to\ add\r\n
comment7.params=e
comment7.target=void\ addLast(java.lang.Object)
comment7.text=\r\n\ Adds\ an\ element\ to\ the\ end\ of\ the\ list.\r\n\ @param\ e\ \ \ the\ new\ element\ to\ add\r\n
comment8.params=
comment8.target=java.lang.Object\ removeFirst()
comment8.text=\r\n\ Removes\ and\ returns\ the\ first\ element\ of\ the\ list.\r\n\ @return\ the\ removed\ element\ (or\ null\ if\ empty)\r\n
comment9.params=
comment9.target=java.lang.Object\ removeLast()
comment9.text=\r\n\ Removes\ and\ returns\ the\ last\ element\ of\ the\ list.\r\n\ @return\ the\ removed\ element\ (or\ null\ if\ empty)\r\n
numComments=13
