#BlueJ class context
comment0.target=RecursionNotes
comment0.text=\r\n\ Data\ Structures\ with\ Evan\ Korth\r\n\ Kevin\ Song\r\n
comment1.params=file
comment1.target=java.lang.String\ subdirectory(java.lang.String)
comment1.text=\r\n\ 9/13/21\r\n\ Recursion\:\ \r\n\ \r\n\ Method\ calls\ itself.\ \r\n
comment2.params=args
comment2.target=void\ main(java.lang.String[])
comment3.params=number
comment3.target=int\ findFactorial(int)
comment4.params=index
comment4.target=void\ count(byte)
comment5.params=n
comment5.target=void\ upAndDown(int)
comment5.text=\r\n\ When\ you\ run\ a\ program,\ the\ computer\ creates\ a\ stack.\r\n\ This\ is\ called\ the\ program\ stack.\ Each\ time\ you\ invoke\r\n\ a\ method,\ the\ method's\ activation\ record\ is\ placed\ \r\n\ on\ top\ of\ the\ stack.\ When\ the\ method\ returns\ or\ exits,\r\n\ the\ method\ is\ popped\ off\ (removed\ from)\ the\ stack.\r\n\ \r\n\ There\ are\ two\ types\ of\ memory.\r\n\ Heap\:\ dynamic\ (where\ data\ created\ in\ the\ program\ is\ stored)\r\n\ Stack\:\ methods\ (starting\ with\ main())\r\n\ \r\n\ When\ you\ call\ a\ method,\ you\ push\ the\ method\ on\ the\ stack.\r\n\ You\ push\ the\ method's\ activation\ frame\ on\ the\ stack.\r\n\ Returned\ values\ will\ go\ to\ the\ heap.\r\n\ \r\n\ Infinite\ recursion\ will\ eventually\ cause\ java\ to\ throw\ a\ \r\n\ stack\ overflow\ error.\r\n\ \r\n\ Recursion\ is\ "expensive".\ It\ has\ multiple\ activation\ frames\ and\r\n\ there\ is\ overhead\ involved\ with\ calling\ a\ method.\r\n\ The\ advantage\ to\ recursion\ is\ ease\ of\ writing\ and\ understanding.\r\n
comment6.params=n
comment6.target=long\ fibonacci(long)
numComments=7
